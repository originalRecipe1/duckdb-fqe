/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.1.0/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the Kotlin Test integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the JUnit 5 integration.
    testImplementation(libs.junit.jupiter.engine)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // HTTP client for DuckDB FQE communication
    implementation("com.squareup.okhttp3:okhttp:4.12.0")

    // JSON parsing
    implementation("com.squareup.moshi:moshi:1.15.0")
    implementation("com.squareup.moshi:moshi-kotlin:1.15.0")

    // Logging
    implementation("org.slf4j:slf4j-api:2.0.9")
    implementation("ch.qos.logback:logback-classic:1.4.11")

    // Testing
    testImplementation("io.mockk:mockk:1.13.8")
    testImplementation("com.squareup.okhttp3:mockwebserver:4.12.0")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = "com.duckdb.fqe.jdbc.demo.DemoAppKt"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    // Exclude integration tests from regular test run
    exclude("**/*IntegrationTest*")
}

// Create separate task for integration tests
tasks.register<Test>("integrationTest") {
    description = "Runs integration tests against real DuckDB FQE server"
    group = "verification"

    useJUnitPlatform()

    // Use the same test source sets as regular tests
    testClassesDirs = sourceSets["test"].output.classesDirs
    classpath = sourceSets["test"].runtimeClasspath

    // Only run integration tests
    include("**/*IntegrationTest*")

    // Set system property to enable integration tests
    systemProperty("integration.tests", "true")

    // Ensure unit tests pass first
    dependsOn("test")

    // Fail fast on first test failure
    failFast = false

    // Show detailed test results
    testLogging {
        events("passed", "skipped", "failed", "standardOut", "standardError")
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showStandardStreams = true
        showExceptions = true
        showCauses = true
        showStackTraces = true
    }

    // Print test results after each test
    afterTest(KotlinClosure2<TestDescriptor, TestResult, Unit>({ desc, result ->
        val status = when (result.resultType) {
            TestResult.ResultType.SUCCESS -> "‚úÖ PASSED"
            TestResult.ResultType.FAILURE -> "‚ùå FAILED"
            TestResult.ResultType.SKIPPED -> "‚è≠Ô∏è  SKIPPED"
        }
        println("  $status: ${desc.name} (${result.endTime - result.startTime}ms)")
    }))

    doFirst {
        println("\n" + "=".repeat(80))
        println("üöÄ Running integration tests against DuckDB FQE server...")
        println("üìã Make sure DuckDB FQE and test databases are running:")
        println("   docker-compose up -d")
        println("=".repeat(80) + "\n")
    }

    addTestListener(object : TestListener {
        override fun beforeSuite(suite: TestDescriptor) {}
        override fun beforeTest(testDescriptor: TestDescriptor) {}
        override fun afterTest(testDescriptor: TestDescriptor, result: TestResult) {}
        override fun afterSuite(suite: TestDescriptor, result: TestResult) {
            if (suite.parent == null) { // Only print for the root suite
                println("\n" + "=".repeat(80))
                println("üìä Integration Test Summary")
                println("=".repeat(80))
                println("Total tests: ${result.testCount}")
                println("‚úÖ Passed: ${result.successfulTestCount}")
                println("‚ùå Failed: ${result.failedTestCount}")
                println("‚è≠Ô∏è  Skipped: ${result.skippedTestCount}")
                println("‚è±Ô∏è  Duration: ${(result.endTime - result.startTime) / 1000.0}s")
                println("=".repeat(80) + "\n")
            }
        }
    })
}

// Add integration tests to check task
tasks.named("check") {
    // Don't run integration tests automatically in CI/CD
    // They require external services to be running
}

// Create a task to run all tests (unit + integration)
tasks.register("testAll") {
    description = "Runs both unit tests and integration tests"
    group = "verification"

    dependsOn("test", "integrationTest")

    doLast {
        println("‚úÖ All tests completed successfully!")
    }
}

// Create fat JAR with all dependencies
tasks.register<Jar>("fatJar") {
    description = "Creates a single JAR with all dependencies included"
    group = "build"

    archiveBaseName.set("duckdb-fqe-jdbc")
    archiveClassifier.set("all")
    archiveVersion.set("1.0.0")

    from(sourceSets.main.get().output)

    dependsOn(configurations.runtimeClasspath)
    from({
        configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") }.map { zipTree(it) }
    })

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes["Implementation-Title"] = "DuckDB FQE JDBC Driver"
        attributes["Implementation-Version"] = "1.0.0"
        attributes["Main-Class"] = "com.duckdb.fqe.jdbc.demo.DemoApp"
    }

    doLast {
        println("‚úÖ Fat JAR created: ${archiveFile.get()}")
    }
}
